
movement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aaf  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053e  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  7a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)

{

	LCD_DATA = cmd;      // data lines are set to send command*
  82:	88 bb       	out	0x18, r24	; 24

	PORTD  &= ~(1<<rs);  // RS sets 0
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	82 bb       	out	0x12, r24	; 18

	PORTD  &= ~(1<<rw);  // RW sets 0
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	82 bb       	out	0x12, r24	; 18

	PORTD  |= (1<<en);   // make enable from high to low
  90:	82 b3       	in	r24, 0x12	; 18
  92:	80 68       	ori	r24, 0x80	; 128
  94:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	9c e9       	ldi	r25, 0x9C	; 156
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_cmd+0x1e>
  a0:	00 00       	nop

	_delay_ms(10);

	PORTD  &= ~(1<<en);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret

000000aa <LCD_write>:

void LCD_write(unsigned char data)

{

	LCD_DATA= data;       // data lines are set to send command
  aa:	88 bb       	out	0x18, r24	; 24

	PORTD  |= (1<<rs);    // RS sets 1
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	82 bb       	out	0x12, r24	; 18

	PORTD  &= ~(1<<rw);   // RW sets 0
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	82 bb       	out	0x12, r24	; 18

	PORTD  |= (1<<en);    // make enable from high to low
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	82 bb       	out	0x12, r24	; 18
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9c e9       	ldi	r25, 0x9C	; 156
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_write+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_write+0x1e>
  c8:	00 00       	nop

	_delay_ms(10);

	PORTD &= ~(1<<en);
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	08 95       	ret

000000d2 <init_LCD>:

void init_LCD(void)

{

	LCD_cmd(0x38);           // initialization in 8bit mode of 16X2 LCD
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <init_LCD+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <init_LCD+0x10>
  e2:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x01);          // make clear LCD
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <init_LCD+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <init_LCD+0x22>
  f4:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x02);          // return home
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  fc:	8f e9       	ldi	r24, 0x9F	; 159
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <init_LCD+0x2e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <init_LCD+0x34>
 106:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x06);          // make increment in cursor
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <init_LCD+0x40>
 116:	00 c0       	rjmp	.+0      	; 0x118 <init_LCD+0x46>
 118:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x80);          // “8” go to first line and “0” is for 0th position
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_LCD+0x52>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_LCD+0x58>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Write_String>:

}
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	03 c0       	rjmp	.+6      	; 0x144 <LCD_Write_String+0x16>
	{
		char big = a[i];
		LCD_write(big);
 13e:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_write>
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	f8 01       	movw	r30, r16
 146:	ec 0f       	add	r30, r28
 148:	fd 1f       	adc	r31, r29
 14a:	80 81       	ld	r24, Z
 14c:	81 11       	cpse	r24, r1
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <LCD_Write_String+0x10>
	{
		char big = a[i];
		LCD_write(big);
	}
	
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <main>:

// led bulb programing start...............//

int main(void)
{
	DDRC = 0xFF;   /* make port as a output port*/
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 bb       	out	0x14, r24	; 20
	
	while(1)
	{
		PORTC = 0;              //led off //
 15e:	15 ba       	out	0x15, r1	; 21
 160:	ef e3       	ldi	r30, 0x3F	; 63
 162:	fc e9       	ldi	r31, 0x9C	; 156
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x10>
 16a:	00 00       	nop
		_delay_ms(10);
		PORTC = 0;             //led on //
 16c:	15 ba       	out	0x15, r1	; 21
 16e:	ff ef       	ldi	r31, 0xFF	; 255
 170:	29 ef       	ldi	r18, 0xF9	; 249
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f1 50       	subi	r31, 0x01	; 1
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x1a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x24>
 17e:	00 00       	nop

		//.........lcd programming start....................



		DDRB=0xFF;              // set LCD data port as output
 180:	87 bb       	out	0x17, r24	; 23

		DDRD=0xE0;              // set LCD signals (RS, RW, E) as out put
 182:	80 ee       	ldi	r24, 0xE0	; 224
 184:	81 bb       	out	0x11, r24	; 17

		init_LCD();             // initialize LCD
 186:	0e 94 69 00 	call	0xd2	; 0xd2 <init_LCD>
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x34>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x3a>
 194:	00 00       	nop

		_delay_ms(5);         // delay

		

		LCD_cmd(0x0C);          // display on, cursor off
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 19c:	ef e1       	ldi	r30, 0x1F	; 31
 19e:	fe e4       	ldi	r31, 0x4E	; 78
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x46>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x4c>
 1a6:	00 00       	nop

		_delay_ms(5);
		

		LCD_Write_String(" Sanitizing..   ");
 1a8:	80 e6       	ldi	r24, 0x60	; 96
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Write_String>
 1b0:	ff ef       	ldi	r31, 0xFF	; 255
 1b2:	23 ed       	ldi	r18, 0xD3	; 211
 1b4:	30 e3       	ldi	r19, 0x30	; 48
 1b6:	f1 50       	subi	r31, 0x01	; 1
 1b8:	20 40       	sbci	r18, 0x00	; 0
 1ba:	30 40       	sbci	r19, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x5c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x66>
 1c0:	00 00       	nop
		_delay_ms(1000);


		LCD_cmd(0xC0);          // move cursor to the start of 2nd line
 1c2:	80 ec       	ldi	r24, 0xC0	; 192
 1c4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	93 ed       	ldi	r25, 0xD3	; 211
 1cc:	e0 e3       	ldi	r30, 0x30	; 48
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e0 40       	sbci	r30, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x74>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x7e>
 1d8:	00 00       	nop

		_delay_ms(1000);
		
		LCD_Write_String("  ");    //2nd line display//
 1da:	8e e6       	ldi	r24, 0x6E	; 110
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_Write_String>
 1e2:	ff ef       	ldi	r31, 0xFF	; 255
 1e4:	23 ed       	ldi	r18, 0xD3	; 211
 1e6:	30 e3       	ldi	r19, 0x30	; 48
 1e8:	f1 50       	subi	r31, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x8e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x98>
 1f2:	00 00       	nop

		

		

		LCD_cmd(0x01);          // make display ON, cursor ON
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	93 ed       	ldi	r25, 0xD3	; 211
 1fe:	e0 e3       	ldi	r30, 0x30	; 48
 200:	81 50       	subi	r24, 0x01	; 1
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e0 40       	sbci	r30, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xa6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xb0>
 20a:	00 00       	nop
	}
	
	
	

}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
